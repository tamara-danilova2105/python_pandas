import pandas as pd

#–ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö (–≥—Ä—è–∑–Ω—ã—Ö) –¥–∞–Ω–Ω—ã—Ö
def load_dirty_data(path: str = "app/data/employees_dirty.csv") -> pd.DataFrame:
    return pd.read_csv(path)

#–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
def check_missing(df: pd.DataFrame):
    print("\nüîé –ü—Ä–æ–ø—É—Å–∫–∏:\n", df.isna().sum())
    return df

#–ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏: age –Ω–∞ —Å—Ä–µ–¥–Ω–µ–µ, salary –Ω–∞ –º–µ–¥–∏–∞–Ω–∞
def fill_missing(df: pd.DataFrame) -> pd.DataFrame:
    df['age'].fillna(df['age'].mean(), inplace=True)
    df['salary'].fillna(df['salary'].median(), inplace=True)
    return df

#–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç—Ä–æ–∫
def remove_duplicates(df: pd.DataFrame) -> pd.DataFrame:
    before = len(df)
    df = df.drop_duplicates()
    after = len(df)
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π: {before - after}")
    return df

#–£–¥–∞–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏: age < 0 –∏–ª–∏ salary < 10000
def fix_anomalies(df: pd.DataFrame) -> pd.DataFrame:
    before = len(df)
    df = df[(df["age"] >= 0) & (df["salary"] >= 10000)]
    after = len(df)
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {before - after}")
    return df

#–£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∏–º–µ–Ω–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
def clean_names(df: pd.DataFrame) -> pd.DataFrame:
    df["name"] = df["name"].str.strip().str.lower()
    return df

#–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º hire_date –≤ datetime –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É year
def convert_dates(df: pd.DataFrame) -> pd.DataFrame:
    df["hire_date"] = pd.to_datetime(df["hire_date"], errors="coerce")
    df["year"] = df["hire_date"].dt.year
    return df

def add_age_group(df: pd.DataFrame) -> pd.DataFrame:
    bins = [0, 25, 40, 100]
    labels = ["–º–æ–ª–æ–¥–æ–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å—Ç–∞—Ä—à–∏–π"]
    df["age_group"] = pd.cut(df["age"], bins=bins, labels=labels, right=False)
    return df

import numpy as np

def add_salary_level(df: pd.DataFrame) -> pd.DataFrame:
    conditions = [
        (df["salary"] < 70000),
        (df["salary"].between(70000, 100000)),
        (df["salary"] > 100000)
    ]
    choices = ["–Ω–∏–∑–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–≤—ã—Å–æ–∫–∞—è"]
    df["salary_level"] = np.select(conditions, choices, default="–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    return df


def add_name_length(df: pd.DataFrame) -> pd.DataFrame:
    df["name_length"] = df["name"].str.len()
    return df

def add_is_newcomer(df: pd.DataFrame) -> pd.DataFrame:
    df["is_newcomer"] = df["year"] >= 2020
    return df


def data_cleaning():
    df = load_dirty_data()

    print("\n=== –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n", df.head())

    df = check_missing(df)
    df = fill_missing(df)
    df = remove_duplicates(df)
    df = fix_anomalies(df)
    df = clean_names(df)
    df = convert_dates(df)

    # üîπ –§–∏—á–∏-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥
    df = add_age_group(df)
    df = add_salary_level(df)
    df = add_name_length(df)
    df = add_is_newcomer(df)

    print("\n=== –ò—Ç–æ–≥–æ–≤—ã–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n", df.head())

    df.to_csv("app/data/employees_clean.csv", index=False)
    print("\nüíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: app/data/employees_clean.csv")